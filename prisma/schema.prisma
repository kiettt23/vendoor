generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Required for creating a User: id, name, email, image, cart (optional JSON string)
model User {
    id    String @id
    name  String
    email String
    image String
    cart  Json   @default("{}")

    // Relations
    ratings     Rating[]
    Address     Address[]
    store       Store?
    buyerOrders Order[]   @relation("BuyerRelation")
}

// Required for creating a Product: name, description, mrp, price, images, category, storeId
model Product {
    id          String   @id @default(cuid())
    name        String
    description String
    mrp         Float
    price       Float
    images      String[]
    category    String
    inStock     Boolean  @default(true)
    storeId     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
    orderItems OrderItem[]
    rating     Rating[]

    // Performance indexes for common queries
    @@index([storeId])        // For store products listing
    @@index([category])       // For category filtering
    @@index([inStock])        // For available products
    @@index([createdAt])      // For date sorting (latest products)
    @@index([storeId, inStock]) // Composite: store products that are available
}

enum OrderStatus {
    ORDER_PLACED
    PROCESSING
    SHIPPED
    DELIVERED
}

enum PaymentMethod {
    COD
    STRIPE
}

// Required for creating an Order: total, userId, storeId, addressId, isPaid, paymentMethod, isCouponUsed, coupon (JSON), orderItems (nested)
model Order {
    id            String        @id @default(cuid())
    total         Float
    status        OrderStatus   @default(ORDER_PLACED)
    userId        String
    storeId       String
    addressId     String
    isPaid        Boolean       @default(false)
    paymentMethod PaymentMethod
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    isCouponUsed  Boolean       @default(false)
    coupon        Json          @default("{}")
    orderItems    OrderItem[]

    // Relations
    user    User    @relation("BuyerRelation", fields: [userId], references: [id])
    store   Store   @relation(fields: [storeId], references: [id])
    address Address @relation(fields: [addressId], references: [id])

    // Performance indexes for common queries
    @@index([userId])           // For user order history
    @@index([storeId])          // For store order management
    @@index([status])           // For order status filtering
    @@index([createdAt])        // For date sorting
    @@index([userId, status])   // Composite: user orders by status
    @@index([storeId, status])  // Composite: store orders by status
}

// Required for creating an OrderItem: orderId, productId, quantity, price
model OrderItem {
    orderId   String
    productId String
    quantity  Int
    price     Float

    // Relations
    order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id])

    @@id([orderId, productId])
}

// Required for creating a Rating: rating, review, userId, productId
model Rating {
    id        String   @id @default(cuid())
    rating    Int
    review    String
    userId    String
    productId String
    orderId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([userId, productId, orderId])
    // Performance indexes for common queries
    @@index([productId])        // For product ratings
    @@index([userId])           // For user ratings
    @@index([rating])           // For rating filtering/sorting
    @@index([createdAt])        // For latest ratings
}

// Required for creating an Address: userId, name, email, street, city, state, zip, country, phone
model Address {
    id        String   @id @default(cuid())
    userId    String
    name      String
    email     String
    street    String
    city      String
    state     String
    zip       String
    country   String
    phone     String
    createdAt DateTime @default(now())

    // Relations
    Order Order[]
    user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Performance indexes for common queries
    @@index([userId])           // For user addresses
}

// Required for creating a Coupon: code, description, discount, forNewUser, isPublic, expiresAt
model Coupon {
    code        String   @id
    description String
    discount    Float
    forNewUser  Boolean
    forMember   Boolean  @default(false)
    isPublic    Boolean
    expiresAt   DateTime
    createdAt   DateTime @default(now())
}

// Required for creating a Store: userId, name, username, email, contact, logo, description, address (optional: , status, isActive)
model Store {
    id          String   @id @default(cuid())
    userId      String   @unique
    name        String
    description String
    username    String   @unique
    address     String
    status      String   @default("pending")
    isActive    Boolean  @default(false)
    logo        String
    email       String
    contact     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    Product Product[]
    Order   Order[]
    user    User      @relation(fields: [userId], references: [id])

    // Performance indexes for common queries
    @@index([status])           // For admin approval workflow
    @@index([isActive])         // For active stores listing
    @@index([username])         // For store lookup (already unique, but for performance)
    @@index([createdAt])        // For latest stores
}
